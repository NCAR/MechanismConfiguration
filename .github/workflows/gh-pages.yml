name: GitHub Pages
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    branches:
      - main

env:
  DEFAULT_BRANCH: "main"

permissions:
    contents: write

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3

      - name: Install dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Debugging information
        run: |
          echo "github.ref:" ${{github.ref}}
          echo "github.event_name:" ${{github.event_name}}
          echo "github.head_ref:" ${{github.head_ref}}
          echo "github.base_ref:" ${{github.base_ref}}
          set -x
          git rev-parse --abbrev-ref HEAD
          git branch
          git branch -a
          git remote -v
          python -V
          pip list --not-required
          pip list

      - name: Setup gh-pages folder
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
        run: |
          set -x
          git fetch
          ( git branch gh-pages remotes/origin/gh-pages && git clone . --branch=gh-pages _gh-pages/ ) || mkdir _gh-pages
          rm -rf _gh-pages/.git/
          mkdir -p _gh-pages/versions/
          mkdir -p _gh-pages/dev/

      # If a push to main branch, build dev documentation
      - name: Build and copy documentation (dev)
        if: |
          contains(github.event_name, 'push') &&
          contains(github.ref, env.DEFAULT_BRANCH)
        run: |
          set -x
          cd docs
          export SWITCHER_SUFFIX=" (dev)"
          make html
          ls -l
          ls -l build/html
          rm -rf ../_gh-pages/dev/*
          cp -r build/html/* ../_gh-pages/dev/

      # If a release, build versioned documentation
      - name: Build and copy documentation (release)
        if: contains(github.event_name, 'release')
        run: |
          set -x
          cd docs
          # Extract version from tag (remove 'v' prefix if present)
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "Building documentation for version: $VERSION"
          
          # Build two copies: one for stable and one for the specific version
          # First, build the stable version
          export SWITCHER_SUFFIX=" (stable)"
          make clean
          make html
          
          # Delete everything under _gh-pages/ that is from the primary deployment
          # but preserve dev/ and versions/ directories
          find ../_gh-pages/ -mindepth 1 ! -path '../_gh-pages/dev*' ! -path '../_gh-pages/versions*' -delete
          cp -r build/html/* ../_gh-pages/
          
          # Now build the versioned copy
          export SWITCHER_SUFFIX=""
          make clean
          make html
          mkdir -p ../_gh-pages/versions/${VERSION}
          cp -r build/html/* ../_gh-pages/versions/${VERSION}/

      # If a push and not on default branch, build dev documentation for testing
      - name: Build documentation (pull request)
        if: |
          contains(github.event_name, 'push') &&
          !contains(github.ref, env.DEFAULT_BRANCH)
        run: |
          set -x
          cd docs
          make html

      # Add the .nojekyll file
      - name: nojekyll
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          touch _gh-pages/.nojekyll

      - name: Debugging information
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          ls -la _gh-pages/
          if [ -d "_gh-pages/dev" ]; then ls -la _gh-pages/dev/; fi
          if [ -d "_gh-pages/versions" ]; then ls -la _gh-pages/versions/; fi

      # Deploy
      # https://github.com/peaceiris/actions-gh-pages
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _gh-pages/
          force_orphan: true